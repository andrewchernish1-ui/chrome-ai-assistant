const messagesContainer = document.getElementById('messages');
const messageInput = document.getElementById('messageInput');
const sendButton = document.getElementById('sendButton');
const speechButton = document.getElementById('speechButton');

// Generate session ID if not exists
let sessionId = localStorage.getItem('aiAssistantSessionId');
if (!sessionId) {
  sessionId = crypto.randomUUID();
  localStorage.setItem('aiAssistantSessionId', sessionId);
}

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∞—É–¥–∏–æ
let isPlayingAudio = false;
let audioController = null;

function addMessage(content, isUser = false) {
  const messageDiv = document.createElement('div');
  messageDiv.className = `message ${isUser ? 'user' : 'assistant'}`;

  const contentDiv = document.createElement('div');
  contentDiv.className = 'message-content';
  contentDiv.textContent = content;

  messageDiv.appendChild(contentDiv);
  messagesContainer.appendChild(messageDiv);
  messagesContainer.scrollTop = messagesContainer.scrollHeight;
}

async function getPageContent() {
  try {
    console.log('üîÑ Getting page content...');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ chrome API
    if (!chrome || !chrome.runtime) {
      console.error('‚ùå Chrome runtime not available');
      return {
        summarized: '',
        details: { title: 'Chrome API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', text: '', url: '', forms: [] }
      };
    }

    const response = await chrome.runtime.sendMessage({ action: 'getPageContent' });
    console.log('üì® Received response from background script:', response);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
    if (!response) {
      console.error('‚ùå No response from background script');
      return {
        summarized: '',
        details: { title: '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç background script', text: '', url: '', forms: [] }
      };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç
    if (!response.text || response.text.trim().length === 0) {
      console.warn('‚ö†Ô∏è No text content found, trying fallback method');
      // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞–ø—Ä—è–º—É—é
      const fallbackContent = await getPageContentFallback();
      if (fallbackContent) {
        response.text = fallbackContent;
        console.log('‚úÖ Fallback content extracted:', response.text.substring(0, 100));
      }
    }

    // Create compressed human-readable summary
    const pageContent = `Page Title: ${response.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}
URL: ${response.url || window.location.href}
Content: ${(response.text || '').replace(/\s+/g, ' ').slice(0, 3000)}
Forms: ${response.forms ? response.forms.map(form => `${form.id}: ${form.fields.map(f => `${f.label || f.name}`).join(', ')}`).join('; ') : '–ù–µ—Ç —Ñ–æ—Ä–º'}`;

    console.log('‚úÖ Page content extracted successfully');
    console.log('üìÑ Title:', response.title);
    console.log('üîó URL:', response.url);
    console.log('üìù Text length:', response.text ? response.text.length : 0);

    return {
      summarized: pageContent,
      details: response
    };
  } catch (error) {
    console.error('‚ùå Failed to get page content:', error);
    console.error('‚ùå Error details:', error.message);

    return {
      summarized: '',
      details: {
        title: '–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞',
        text: `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${error.message}`,
        url: window.location?.href || '',
        forms: []
      }
    };
  }
}

// Fallback –º–µ—Ç–æ–¥ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
async function getPageContentFallback() {
  try {
    console.log('üîÑ Trying fallback content extraction...');

    // –ü—Ä–æ—Å—Ç–æ–π –º–µ—Ç–æ–¥ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
    const text = document.body ? document.body.innerText || document.body.textContent || '' : '';
    const title = document.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
    const url = window.location.href || '';

    if (text.trim().length > 0) {
      console.log('‚úÖ Fallback content extracted successfully');
      return text.trim().slice(0, 5000);
    } else {
      console.warn('‚ö†Ô∏è Fallback method also returned empty content');
      return '';
    }
  } catch (error) {
    console.error('‚ùå Fallback method also failed:', error);
    return '';
  }
}

async function sendMessage() {
  const message = messageInput.value.trim();
  if (!message || sendButton.disabled) return;

  addMessage(message, true);
  messageInput.value = '';
  sendButton.disabled = true;

  try {
    const pageContext = await getPageContent();

    const response = await fetch(`http://localhost:8000/chat/${sessionId}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        message: message,
        page_content: pageContext.summarized,
        page_details: pageContext.details
      })
    });

    if (!response.ok) {
      throw new Error(`HTTP ${response.status}`);
    }

    const data = await response.json();
    const assistantResponse = data.response;
    addMessage(assistantResponse, false);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    setTimeout(() => {
      if (!isPlayingAudio) {
        synthesizeSpeech(assistantResponse);
      }
    }, 500); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏–µ–º
  } catch (error) {
    console.error('Error:', error);
    addMessage('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.', false);
  } finally {
    sendButton.disabled = false;
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–≥–æ –∏–∑–ª–æ–∂–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
function createPageSummary(pageData) {
  if (!pageData || !pageData.details || !pageData.details.text) {
    return '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã.';
  }

  const { title, text, url } = pageData.details;

  // –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Ç–∫–æ–µ –∏–∑–ª–æ–∂–µ–Ω–∏–µ –∏–∑ –ø–µ—Ä–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Ç–µ–∫—Å—Ç–∞
  const sentences = text.split(/[.!?]+/).filter(s => s.trim().length > 10);
  const summary = sentences.slice(0, 3).join('. ').trim();

  if (summary.length === 0) {
    return `–°—Ç—Ä–∞–Ω–∏—Ü–∞ "${title}" –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–ª–æ–∂–µ–Ω–∏—è.`;
  }

  return `–ö—Ä–∞—Ç–∫–æ–µ –∏–∑–ª–æ–∂–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã "${title}": ${summary}.`;
}

// –°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ —Å –ø–æ–º–æ—â—å—é ElevenLabs (–æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥) –∏–ª–∏ Web Speech API
function updateSpeechButton() {
  if (isPlayingAudio) {
    speechButton.innerHTML = `
      <svg width="16" height="16" fill="currentColor" viewBox="0 0 24 24">
        <path d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
        <path d="M9 10h6"></path>
      </svg>
    `;
    speechButton.style.backgroundColor = '#dc2626'; // –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è —Å—Ç–æ–ø
    speechButton.title = '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–∑–≤—É—á–∏–≤–∞–Ω–∏–µ';
  } else {
    speechButton.innerHTML = `
      <svg width="16" height="16" fill="currentColor" viewBox="0 0 24 24">
        <path d="M19 11a7 7 0 01-7 7m0 0a7 7 0 01-7-7m7 7v4m0 0H8m4 0h4m-4-8a3 3 0 01-3-3V5a3 3 0 116 0v6a3 3 0 01-3 3z"/>
      </svg>
    `;
    speechButton.style.backgroundColor = '#10b981'; // –ó–µ–ª–µ–Ω—ã–π –¥–ª—è —Å—Ç–∞—Ä—Ç
    speechButton.title = '–û–∑–≤—É—á–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã';
  }
}

async function synthesizeSpeech(text) {
  if (isPlayingAudio) {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
    if (audioController) {
      audioController.stop();
      audioController = null;
    }
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Web Speech API –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    if (window.speechSynthesis) {
      window.speechSynthesis.cancel();
    }
    isPlayingAudio = false;
    updateSpeechButton();
    return;
  }

  try {
    isPlayingAudio = true;
    updateSpeechButton();

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º ElevenLabs - –ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–∞
    console.log('üîä Starting speech synthesis with ElevenLabs for text:', text.substring(0, 50) + '...');
    const elevenLabsResult = await synthesizeSpeechElevenLabs(text);

    if (elevenLabsResult) {
      console.log('‚úÖ ElevenLabs synthesis completed successfully');
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–µ—Ç–æ–¥–∞
      window.lastSpeechMethod = 'ElevenLabs';
      return true;
    } else {
      console.log('üîÑ ElevenLabs failed, trying Web Speech API...');
      // Fallback –Ω–∞ Web Speech API –µ—Å–ª–∏ ElevenLabs –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
      const webSpeechResult = await synthesizeSpeechWebAPI(text);
      if (webSpeechResult) {
        window.lastSpeechMethod = 'Web Speech API';
      }
      return webSpeechResult;
    }
  } catch (error) {
    console.error('‚ùå Error in speech synthesis:', error);
    // –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback –Ω–∞ Web Speech API
    const webSpeechResult = await synthesizeSpeechWebAPI(text);
    if (webSpeechResult) {
      window.lastSpeechMethod = 'Web Speech API';
    }
    return webSpeechResult;
  } finally {
    if (!isPlayingAudio) {
      updateSpeechButton();
    }
  }
}

// –°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ —á–µ—Ä–µ–∑ ElevenLabs (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API –∫–ª—é—á)
async function synthesizeSpeechElevenLabs(text) {
  return new Promise((resolve) => {
    try {
      if (typeof chrome !== 'undefined' && chrome.runtime) {
        const response = chrome.runtime.sendMessage({
          action: 'synthesizeSpeech',
          text: text,
          model_id: 'eleven_turbo_v2', // –ë–æ–ª–µ–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å
          voice_id: 'pNInz6obpgDQGcFmaJgB', // Adam - –º—É–∂—Å–∫–æ–π –≥–æ–ª–æ—Å
          voice_settings: {
            stability: 0.5,
            similarity_boost: 0.5
          }
        }, (response) => {
          if (response && response.success) {
            console.log('‚úÖ ElevenLabs synthesis completed successfully');

            const audioBlob = new Blob([Uint8Array.from(atob(response.audioData), c => c.charCodeAt(0))], { type: 'audio/mpeg' });
            const audioUrl = URL.createObjectURL(audioBlob);
            const audio = new Audio(audioUrl);

            audio.addEventListener('ended', () => {
              URL.revokeObjectURL(audioUrl);
              isPlayingAudio = false;
              updateSpeechButton();
            });

            audio.addEventListener('error', () => {
              URL.revokeObjectURL(audioUrl);
              isPlayingAudio = false;
              updateSpeechButton();
            });

            audio.play().catch(() => {
              // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
              URL.revokeObjectURL(audioUrl);
              isPlayingAudio = false;
              updateSpeechButton();
            });
            resolve(true);
          } else {
            console.warn('‚ö†Ô∏è ElevenLabs synthesis failed - invalid API key');
            isPlayingAudio = false;
            updateSpeechButton();
            resolve(false);
          }
        });
      } else {
        console.warn('‚ö†Ô∏è Chrome runtime not available for ElevenLabs');
        isPlayingAudio = false;
        updateSpeechButton();
        resolve(false);
      }
    } catch (error) {
      console.error('‚ùå Error in ElevenLabs synthesis:', error);
      isPlayingAudio = false;
      updateSpeechButton();
      resolve(false);
    }
  });
}

// Fallback –Ω–∞ Web Speech API
async function synthesizeSpeechWebAPI(text) {
  return new Promise((resolve) => {
    try {
      if ('speechSynthesis' in window) {
        console.log('üîä Using Web Speech API fallback');

        const utterance = new SpeechSynthesisUtterance(text);
        utterance.lang = 'ru-RU'; // –†—É—Å—Å–∫–∏–π —è–∑—ã–∫
        utterance.rate = 0.8; // –ù–µ–º–Ω–æ–≥–æ –º–µ–¥–ª–µ–Ω–Ω–µ–µ –¥–ª—è –ª—É—á—à–µ–π —Ä–∞–∑–±–æ—Ä—á–∏–≤–æ—Å—Ç–∏
        utterance.pitch = 1;
        utterance.volume = 0.8;

        utterance.onend = () => {
          isPlayingAudio = false;
          updateSpeechButton();
          resolve(true);
        };

        utterance.onerror = (error) => {
          console.error('‚ùå Web Speech API error:', error);
          isPlayingAudio = false;
          updateSpeechButton();
          resolve(false);
        };

        window.speechSynthesis.speak(utterance);
      } else {
        console.warn('‚ö†Ô∏è Speech synthesis not supported in this browser');
        isPlayingAudio = false;
        updateSpeechButton();
        resolve(false);
      }
    } catch (error) {
      console.error('‚ùå Error in Web Speech API fallback:', error);
      isPlayingAudio = false;
      updateSpeechButton();
      resolve(false);
    }
  });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏
async function handleSpeechSynthesis() {
  if (speechButton.disabled) return;

  speechButton.disabled = true;
  speechButton.style.opacity = '0.5';

  try {
    const pageData = await getPageContent();
    if (!pageData) {
      addMessage('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã', false);
      return;
    }

    const summary = createPageSummary(pageData);
    addMessage(`–°–æ–∑–¥–∞—é –∞—É–¥–∏–æ: ${summary.substring(0, 100)}...`, false);

    const success = await synthesizeSpeech(summary);

    if (success) {
      const method = window.lastSpeechMethod || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Ç–æ–¥';
      addMessage(`‚úÖ –ê—É–¥–∏–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ${method})...`, false);
    } else {
      addMessage('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—á—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.', false);
    }
  } catch (error) {
    console.error('Error in speech synthesis process:', error);
    addMessage('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã', false);
  } finally {
    speechButton.disabled = false;
    speechButton.style.opacity = '1';
  }
}

function handleKeyPress(event) {
  if (event.key === 'Enter') {
    sendMessage();
  }
}

// Welcome message
addMessage('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ò–ò-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å –≤—Å—ë –æ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.', false);

// Event listeners
messageInput.addEventListener('keypress', handleKeyPress);
sendButton.addEventListener('click', sendMessage);
speechButton.addEventListener('click', handleSpeechSynthesis);
